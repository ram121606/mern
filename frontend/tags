head ->style script title meta base link
text-formatting -> b small strong div i em pre sup sub del
link
list 
table
form
scripting
image and objects

meta-> keyword and viewport
base -> target
small tag-> copyright contents

CSS selectors!
-> Simple selectors ->> id, name, class
-> combinative selectors ->> descendent(space), child(>), adjacent sibling(+), general(~)
-> pseudo-element selectors ->> completely on contents -> (tag::type) first-letter, first-line, selection, marker, before, after 
-> pseudo-class selectors ->> completely on links(: , a:types) link, active, visited, hover
-> attribute selectors ->> name, value

forms-> type=>text, password, button, checkbox, radio, submit
form elements-> input, label, button, text area, legend, fieldset, datalist, select, option, optgroup, output, 

JS objects-> no restriction for keys
JS->template based object oriented programming language
obj creation ->3 ways
->object literal => {1:'x , 2:'y}
->instance of object directly using new keyword => let obj = new Object()    obj.name="karan"   obj.age=99
->by using obj constructor => 
function exmaple(name,age){ this.name = name; this.age = age}  let obj = new exmaple("karan",99) obj.name , obj.age

JS understands only objs whereas server understands only JSON srting. Inorder to request from client to server conversion of JS objects to JSON string is required which is done by maeans of stringify() method. Whereas inorder to get response from the server conversion of JSON to JS objects is required which can be done by means parse() method.

promise => either a success or failure
consists of 4 states => pending, fulfilled, rejected,  settled